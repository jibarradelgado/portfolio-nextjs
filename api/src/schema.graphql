scalar DateTime

type Query {
  assets(where: AssetWhereInput): [Asset]!
  assetTypes(where: AssetTypeWhereInput): [AssetType]!
}

type Mutation {
  upsertAsset(where: AssetWhereInput!, data: AssetCreateInput!): Asset!
  upsertAssetType(where: AssetTypeWhereInput!, data: AssetTypeCreateInput!): AssetType
}

interface BaseModel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Asset implements BaseModel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime

  name: String!
  value: Float!
  quantity: Float
  type: AssetType!
  user: User!
  attribute: Attribute
  assetTypeId: Int!
  userId: Int!
  attributeId: Int
}

type AssetType implements BaseModel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  targetPercentage: Float!
  user: User!
  userId: Int!
}

type User implements BaseModel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  username: String
  password: String
  admin: Boolean
}

type Attribute {
  id: ID!
  updatedAt: DateTime
  type: String
  name: String
  symbol: String
  lastValue: Float
}

input AssetCreateInput {
  name: String!
  value: Float!
  quantity: Float
  assetTypeId: Int!
  userId: Int!
  attributeId: Int
}

input AssetWhereInput {
  id: ID!
}

input AssetTypeCreateInput {
  name: String!
  targetPercentage: Float!
  userId: Int!
}

input AssetTypeWhereInput {
  id: ID!
}